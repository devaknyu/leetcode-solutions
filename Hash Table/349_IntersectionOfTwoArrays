"""
LeetCode 349: Intersection of Two Arrays
https://leetcode.com/problems/intersection-of-two-arrays/

Approach:
- We need to find the **unique intersection elements** between two integer arrays `nums1` and `nums2`.
- Convert `nums1` into a set (`seen`) to allow O(1) lookups.
- Initialize an empty list `result` to store the intersection elements.
- Iterate through each element in `nums2`:
  - If the element exists in `seen`, it means it's part of the intersection.
  - Append it to `result` and remove it from `seen` to avoid duplicates.
- Finally, return `result`.

Example:
nums1 = [1, 2, 2, 1], nums2 = [2, 2] → [2]
nums1 = [4, 9, 5], nums2 = [9, 4, 9, 8, 4] → [9, 4] (order does not matter)

Time Complexity: O(n + m)
Space Complexity: O(n)
"""

class Solution:
    def intersection(self, nums1: list[int], nums2: list[int]) -> list[int]:
        seen = set(nums1)
        result = []

        for i in nums2:
            if i in seen:
                result.append(i)
                seen.remove(i)
        return result

# Example usage
if __name__ == "__main__":
    sol = Solution()
    print(sol.intersection([1, 2, 2, 1], [2, 2]))          # Expected output: [2]
    print(sol.intersection([4, 9, 5], [9, 4, 9, 8, 4]))    # Expected output: [9, 4]






